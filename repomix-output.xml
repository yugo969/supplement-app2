This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
components/
  ui/
    button.tsx
public/
  next.svg
  vercel.svg
src/
  components/
    NotificationPopup.tsx
  lib/
    firebaseClient.ts
    firestore.ts
    resizeImage.ts
    useNotification.ts
  pages/
    api/
      hello.ts
    _app.tsx
    _document.tsx
    index.tsx
    login.tsx
    signup.tsx
  providers/
    NotificationContext.tsx
  styles/
    globals.css
.eslintrc.json
.gitattributes
.gitignore
cors.json
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/ui/button.tsx">
import { Button } from 'shadcn-ui';

export const MyButton = ({ children, ...props }) => (
  <Button {...props}>{children}</Button>
);
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
</file>

<file path="src/components/NotificationPopup.tsx">
import React from 'react'
import { useNotification } from '@/lib/useNotification';

const NotificationPopup = () => {
  const { isVisible, notificationProps } = useNotification();
  if(!isVisible || !notificationProps) return null;

  return (
    <div className="fixed top-0 bottom-0 left-0 right-0 overflow-hidden overscroll-none flex justify-center items-center w-screen h-screen bg-black/60">
      <div className="flex w-fit h-fit rounded-lg py-10 px-16 bg-white/90 text-black ">
        {notificationProps.message}
      </div>
    </div>
  );
}

export default NotificationPopup
</file>

<file path="src/lib/firebaseClient.ts">
import firebase from 'firebase/compat/app';
import 'firebase/compat/auth';
import 'firebase/compat/firestore';
import 'firebase/compat/storage';

if (!firebase.apps.length) {
  firebase.initializeApp({
    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
  });
}

export default firebase;
</file>

<file path="src/lib/resizeImage.ts">
function resizeImage(file: File, maxWidth: number, maxHeight: number): Promise<string> {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function(event: ProgressEvent<FileReader>) {
            if (!event.target?.result) {
                reject(new Error("ファイルの読み込みに失敗しました。"));
                return;
            }

            const img = new Image();
            img.src = event.target.result as string;

            img.onload = function() {
                let width = img.width;
                let height = img.height;

                if (width > maxWidth) {
                    height = height * (maxWidth / width);
                    width = maxWidth;
                }

                if (height > maxHeight) {
                    width = width * (maxHeight / height);
                    height = maxHeight;
                }

                const canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;

                const ctx = canvas.getContext("2d");
                if (!ctx) {
                    reject(new Error("キャンバスのコンテキストの取得に失敗しました。"));
                    return;
                }

                ctx.drawImage(img, 0, 0, width, height);
                resolve(canvas.toDataURL("image/jpeg"));
            }

            img.onerror = function() {
                reject(new Error("画像の読み込みに失敗しました。"));
            }
        }

        reader.onerror = function() {
            reject(new Error("ファイルの読み込みに失敗しました。"));
        }

        reader.readAsDataURL(file);
    });
}

export default resizeImage;
</file>

<file path="src/lib/useNotification.ts">
import { useNotificationContext } from "@/providers/NotificationContext";

export const useNotification = () => {
  const context = useNotificationContext();
  return context;
};
</file>

<file path="src/pages/api/hello.ts">
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}
</file>

<file path="src/pages/_document.tsx">
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
</file>

<file path="src/providers/NotificationContext.tsx">
import { createContext, useContext, useState, useCallback } from 'react';

type NotificationProps = {
  message: string;
  duration?: number;
  onDismiss?: () => void;
};

type NotificationContextType = {
  isVisible: boolean;
  setIsVisible?: boolean;
  notificationProps: NotificationProps | null;
  showNotification: (props: NotificationProps) => void;
};

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export const useNotificationContext = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotificationContext must be used within a NotificationProvider');
  }
  return context;
};

type Props = {
  children?: React.ReactNode;
};

export const NotificationProvider: React.FC<Props> = ({ children }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [notificationProps, setNotificationProps] = useState<NotificationProps | null>(null);

  const showNotification = useCallback(({ message, duration = 1000, onDismiss }: NotificationProps) => {
    setNotificationProps({ message, duration });
    setIsVisible(true);

    setTimeout(() => {
      setIsVisible(false);
      setNotificationProps(null);
      if (onDismiss) {
        onDismiss();
      }
    }, duration);
  }, []);

  return (
    <NotificationContext.Provider value={{ isVisible, notificationProps, showNotification }}>
      {children}
    </NotificationContext.Provider>
  );
};
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/lib/firestore.ts">
import firebase from './firebaseClient';

const db = firebase.firestore();

export const addSupplement = async (data:any) => {
  const user = firebase.auth().currentUser;
  if (!user) return;

  await db.collection('supplements').add({
    ...data,
    userId: user.uid,
    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
  });
};

export const getSupplements = async () => {
  const user = firebase.auth().currentUser;
  if (!user) return [];

  const snapshot = await db
    .collection('supplements')
    .where('userId', '==', user.uid)
    .get();

  return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
};

export const updateSupplement = async (id: string | undefined, data:any) => {
  await db.collection('supplements').doc(id).update(data);
};

export const deleteSupplement = async (id: string | undefined) => {
  await db.collection('supplements').doc(id).delete();
};

export const uploadImage = async (file: File) => {
  const storageRef = firebase.storage().ref();
  const fileRef = storageRef.child(file.name);
  await fileRef.put(file);
  return fileRef.getDownloadURL();
};
</file>

<file path="src/pages/_app.tsx">
import NotificationPopup from '@/components/NotificationPopup'
import { NotificationProvider } from '@/providers/NotificationContext'
import '@/styles/globals.css'
import type { AppProps } from 'next/app'

export default function App({ Component, pageProps }: AppProps) {
  return (
    <div>
      <NotificationProvider>
        <Component {...pageProps} />
        <NotificationPopup />
      </NotificationProvider>
    </div>)
}
</file>

<file path="src/pages/login.tsx">
import React from 'react';
import firebase from '../lib/firebaseClient';
import { useForm } from 'react-hook-form';
import { useRouter } from 'next/router';
import Link from 'next/link'

type FormData = {
  email: string;
  password: string;
};

const LoginPage: React.FC = () => {
	const { register, handleSubmit, formState: { errors }, } = useForm<FormData>();
  const router = useRouter();

	  const onSubmit = async (data: FormData) => {
			try {
				await firebase.auth().signInWithEmailAndPassword(data.email, data.password);
				// router.push('/supplements'); // サプリ一覧画面へ遷移
				router.push('/'); // サプリ一覧画面ないのでTOPへ遷移
			} catch (error) {
				console.error(error);
			}
		};

  return (
    <div className='flex h-screen bg-black justify-center items-center'>
      <form className='flex w-96 flex-col gap-6 rounded-sm bg-gray-500 px-16 py-10' onSubmit={handleSubmit(onSubmit)}>
        <div className='flex flex-col grow'>
          <label className='text-[12px] flex w-24'>Email:</label>
          <input className='text-black p-2' type="email"{...register("email",{ required: true })} />
          {errors.email && <span>This field is required</span>}
        </div>
        <div className='flex flex-col grow'>
          <label className='text-[12px] flex w-24'>Password:</label>
          <input className='text-black p-2' type="text" {...register("password",{ required: true })} />
          {errors.password && <span>This field is required</span>}
        </div>
        <div className='self-end flex gap-2 text-normal leading-none'>
          <button className="py-1 px-2 rounded-sm bg-orange-300" type="submit">ログイン</button>
          <Link href="/signup" className="py-1 px-2 rounded-sm border border-orange-300">新規登録</Link>
        </div>
      </form>
    </div>
  );
};

export default LoginPage;
</file>

<file path="src/pages/signup.tsx">
import React from 'react';
import firebase from '../lib/firebaseClient';
import { useForm } from 'react-hook-form';
import { useRouter } from 'next/router';

type FormData = {
  email: string;
  password: string;
};

const SignupPage: React.FC = () => {
	const { register, handleSubmit, formState: { errors }, } = useForm<FormData>();
  const router = useRouter();

	  const onSubmit = async (data: FormData) => {
			try {
				await firebase.auth().createUserWithEmailAndPassword(data.email, data.password);
				// router.push('/supplements'); // サプリ一覧画面へ遷移
				router.push('/'); // サプリ一覧画面ないのでTOPへ遷移
			} catch (error) {
				console.error(error);
			}
		};

  return (
    <div className='flex h-screen bg-black justify-center items-center'>
      <form className='flex w-96 flex-col gap-6 rounded-sm bg-gray-500 px-16 py-10' onSubmit={handleSubmit(onSubmit)}>
        <div>
          <label>Email:</label>
          <input  className='text-black' type="email"{...register("email",{ required: true })} />
          {errors.email && <span>This field is required</span>}
        </div>
        <div>
          <label>Password:</label>
          <input className='text-black' type="text" {...register("password",{ required: true })} />
          {errors.password && <span>This field is required</span>}
        </div>
        <button type="submit" className="py-1 px-2 rounded-sm bg-orange-300">アカウント作成</button>
      </form>
    </div>
  );
};

export default SignupPage;
</file>

<file path=".gitattributes">
*.tsx linguist-language=React
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ["firebasestorage.googleapis.com"],
  },
};

module.exports = nextConfig;
</file>

<file path="src/styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    background-color: #444;
}

label {
    font-size: 12px;
    line-height: 1;
}

label + input {
    margin-top: 8px;
}

input {
    border-radius: 8px;
    padding: 8px;
}
</file>

<file path="cors.json">
[
  {
    "origin": ["http://localhost:4000"],
    "method": ["GET", "POST", "PUT", "DELETE"],
    "maxAgeSeconds": 3600,
    "responseHeader": [
      "Content-Type",
      "Authorization",
      "Content-Length",
      "User-Agent",
      "X-Firebase-Storage-Version"
    ]
  },
  {
    "origin": ["https://illustrious-squirrel-757f31.netlify.app"],
    "method": ["GET", "POST", "PUT", "DELETE"],
    "maxAgeSeconds": 3600,
    "responseHeader": [
      "Content-Type",
      "Authorization",
      "Content-Length",
      "User-Agent",
      "X-Firebase-Storage-Version"
    ]
  }
]
</file>

<file path="package.json">
{
  "name": "supplement-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 4000",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@types/node": "20.5.9",
    "@types/react": "18.2.21",
    "@types/react-dom": "18.2.7",
    "autoprefixer": "10.4.15",
    "eslint": "8.48.0",
    "eslint-config-next": "13.4.19",
    "firebase": "^10.3.1",
    "next": "13.4.19",
    "postcss": "8.4.29",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-firebase-hooks": "^5.1.1",
    "react-hook-form": "^7.46.1",
    "react-icons": "^4.11.0",
    "shadcn-ui": "^0.9.5",
    "tailwindcss": "3.3.3",
    "typescript": "5.2.2"
  }
}
</file>

<file path="src/pages/index.tsx">
import Image from 'next/image'
import firebase from '@/lib/firebaseClient';
import { useForm } from 'react-hook-form';
import { addSupplement, deleteSupplement, getSupplements, updateSupplement, uploadImage } from '@/lib/firestore'
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { MdAddAPhoto, MdDeleteForever, MdOutlineCancel, MdOutlineMedication, MdOutlineAddBox  } from "react-icons/md";
import resizeImage from '@/lib/resizeImage';
import { useNotification } from '@/lib/useNotification';

type FormData = {
  supplement_name: string;
  dosage: string;
  dosage_unit: string;
  intake_amount: string;
  intake_unit: string;
  timing_morning: boolean;
  timing_noon: boolean;
  timing_night: boolean;
  image?: FileList;
};

type SupplementData = FormData & {
  imageUrl: string;
};

const maxWidth = 552;
const maxHeight =366;


export default function Home() {
  const {
    register, handleSubmit, formState: { errors }, setValue
  } = useForm<FormData>();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [supplements, setSupplements] = useState<any[]>([]);
  const [selectedSupplement, setSelectedSupplement] = useState<null | any>(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [notification, setNotification] = useState<string | null>(null);
  const { showNotification } = useNotification();

  const router = useRouter();

  useEffect(() => {
    const user = firebase.auth().currentUser;
    if (user) {
      setIsLoggedIn(true);
      getSupplements().then(data => setSupplements(data));
    } else {
      setIsLoggedIn(false);
       router.push('/login'); // ログインページへリダイレクト
    }
  }, [router]);

  const handleLogout = async () => {
    await firebase.auth().signOut();
    setIsLoggedIn(false);
    router.push('/login');
  };

  const handleAddOrUpdateSupplement = async (data: FormData) => {

    let imageUrl = uploadedImage;
    if (data.image && data.image[0]) {
      imageUrl = await uploadImage(data.image[0]);
    }

    const supplementData = { ...data, imageUrl }; // 画像のURLを含むデータを作成
    if ('image' in supplementData) {
      delete supplementData.image; // imageキーを削除
    }

    if (selectedSupplement) {
      await updateSupplement(selectedSupplement.id, supplementData);
      showNotification({ message: 'サプリ情報を編集しました' });
    } else {
      await addSupplement(supplementData);
      showNotification({ message: 'サプリ情報を追加しました' });
    }

    setIsModalOpen(false);
    setSelectedSupplement(null);
    setUploadedImage(null);

    getSupplements().then(data => {
      setSupplements(data);
    }).catch(() => {
    });
  }

  const handleOpenUpdateModal = (supplement: SupplementData) => {

    setSelectedSupplement(supplement);
    setIsModalOpen(true);

    // 選択されたサプリの情報をフォームにセット
    setValue("supplement_name", supplement.supplement_name);
    setValue("dosage", supplement.dosage);
    setValue("dosage_unit", supplement.dosage_unit);
    setValue("intake_amount", supplement.intake_amount);
    setValue("intake_unit", supplement.intake_unit);
    setValue("timing_morning", supplement.timing_morning);
    setValue("timing_noon", supplement.timing_noon);
    setValue("timing_night", supplement.timing_night);
    // すでに登録されている画像URLをuploadedImageに設定
    setUploadedImage(supplement.imageUrl);
  }

  const handleDeleteSupplement = async (id: string) => {
    await deleteSupplement(id);

    getSupplements().then(data => {
      setSupplements(data);
      showNotification({ message: 'サプリ情報を削除しました' });
    }).catch(() => {
      showNotification({ message: 'サプリ情報の削除に失敗しました' });
    });
  }

  // サプリメント画像の操作
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {

    const file = e.target.files?.[0];

    if (file) {
      resizeImage(file, maxWidth, maxHeight).then(resizedImageUrl => {
          setUploadedImage(resizedImageUrl);
      }).catch(error => {
          console.error("画像のリサイズに失敗しました:", error);
      });
    } else {
      console.error("ファイルが提供されていません");
    }
  };

  const handleImageDelete = () => {
    setUploadedImage(null);
  };

  const user = firebase.auth().currentUser;
  if (user) {
    console.log("ユーザーは認証されています")
  } else {
    console.log("ユーザーは認証されていません")
  }

  firebase.auth().currentUser;
  if (!isLoggedIn) <p>ログインしてください</p>


  return (
    <div className={`relative ${isModalOpen && "overflow-hidden"}`}>
      <button className="fixed flex flex-col justify-center items-center w-24 h-26 bottom-6 right-6 z-10 border-4 border-white/80 md:hidden text-xs shadow-xl pt-1 p-2 text-orange-950 font-semibold rounded-xl bg-orange-400" onClick={() => setIsModalOpen(true)}>
        <MdOutlineAddBox size={64} />
        <span>サプリ追加</span>
      </button>
      <div className='flex flex-col w-screen h-screen md:p-10 p-4 gap-6'>
        <div className='flex justify-between items-center border-b md:p-6 pb-3 px-0'>
          <h2 className='flex items-center gap-3 text-white md:text-lg text-md'><MdOutlineMedication size={32} /><span className='md:text-[32] font-bold'>サプリストック</span></h2>
          <div className='flex md:gap-6 gap-4'>
            <button className="py-1 md:px-4 px-3 text-bold rounded-md bg-orange-300 md:flex hidden" onClick={() => setIsModalOpen(true)}>サプリ追加</button>
            <button
              className="py-1 md:px-4 px-3 text-sm rounded-md bg-gray-300"
              onClick={handleLogout}
            >ログアウト</button>
          </div>
        </div>

        {isLoggedIn && (
          <div className='flex flex-col'>
            <div className='flex flex-wrap gap-6'>
              {supplements.map((supplement) => (
                <div key={supplement.id} className="flex flex-col justify-between gap-3 md:w-72 w-full pb-2 rounded-lg border-4 border-orange-400 bg-zinc-50">
                  <div className='flex flex-col'>
                    {/* 画像を表示 */}
                    {supplement.imageUrl ? (

                      <div className="relative w-full h-auto aspect-[3/2]">
                        <Image
                          src={supplement.imageUrl}
                          alt={supplement.supplement_name}
                          fill
                          className="inset-0 w-full h-full rounded-t"
                          style={{
                            // objectFit: 'contain',
                            objectFit: 'cover',
                          }}
                        />
                      </div>
                    ) : (
                      <p className='flex justify-center items-center w-full h-[100px] bg-gray-400'>no-image</p>
                    )}

                    <h3 className='py-1 px-4 bg-orange-500 text-bold text-16px text-white'>{supplement.supplement_name}</h3>

                    <div className='flex flex-col gap-4 py-3 px-2'>
                      <div>
                        <span className="text-[12px] border-b flex grow">用量</span>
                        <p className='md:text-lg text-xl'>{supplement.dosage} {supplement.dosage_unit}</p>
                      </div>
                      <div>
                        <span className="text-[12px] border-b flex grow">一回の服用量</span>
                        <p className='md:text-lg text-xl'>{supplement.intake_amount} {supplement.intake_unit}</p>
                      </div>
                      <div className='flex flex-col md:gap-2 gap-2'>
                        <span className="text-[12px] border-b flex grow">服用タイミング</span>
                        <p className='flex gap-2 md:text-sm text-base text-orange-950 font-semibold'>
                          {supplement.timing_morning && (<span className="rounded-full flex py-1 px-4 bg-orange-100">朝</span>)}
                          {supplement.timing_noon && <span className="rounded-full flex py-1 px-4 bg-orange-100">昼</span>}
                          {supplement.timing_night && <span className="rounded-full flex py-1 px-4 bg-orange-100">夜</span>}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className='flex gap-3 self-end px-2'>
                    <button className="py-2 px-5 rounded-md bg-orange-300" onClick={() => handleOpenUpdateModal(supplement)}>編集</button>
                    <button className="py-2 px-5 rounded-md bg-gray-300" onClick={() => handleDeleteSupplement(supplement.id)}>削除</button>
                  </div>
                </div>
              ))}
            </div>

          </div>

        )}

      </div>
      {isModalOpen && (
        <div
          className="modal overscroll-none overflow-auto bg-black/50 w-screen h-screen absolute top-0 bottom-0 left-0 right-0 flex justify-center items-center"
          onClick= {() =>{
            setIsModalOpen(false);
            setSelectedSupplement(null);
          }}
        >
          <form
            className='relative flex flex-col md:w-fit w-[92vw] md:h-fit h-[95vh] gap-6 md:py-8 md:px-20 p-4 bg-slate-400 rounded-lg'
            onSubmit={(e) => {
              e.preventDefault(); // ページのリロードを防ぐ
              handleSubmit(handleAddOrUpdateSupplement)(e);
            }}
            onClick={(e) => e.stopPropagation()}
          >

            <div className="group relative w-full aspect-[3/2] rounded-md bg-gray-200">
              {!uploadedImage ? (
                <label className="absolute inset-0 flex flex-col items-center justify-center gap-2 cursor-pointer">
                  <MdAddAPhoto size={64} />
                  <span className='text-[16px]'>画像追加</span>
                  <input
                    type="file"
                    {...register("image")}
                    onChange={handleImageChange}
                    className="opacity-0 absolute inset-0 w-full h-full"
                  />
                </label>
              ) : (
                <div className="w-full h-full">
                  <Image
                    src={uploadedImage}
                    alt="Uploaded"
                    fill
                    className="absolute inset-0 w-full h-full"
                    style={{
                      objectFit: 'cover',
                    }}
                  />
                  <div className="relative w-full h-full opacity-0 transition duration-300 group-hover:opacity-100 bg-black/70">
                    <button
                      className="flex flex-col justify-center items-center gap-1 opacity-0 transition duration-300 group-hover:opacity-100 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-[22px] w-full h-full rounded"
                      onClick={handleImageDelete}
                    >
                      <MdDeleteForever size={60} />
                      <span className='text-[14px]'>削除</span>
                    </button>
                  </div>
                </div>
              )}
            </div>

            <div className='flex flex-col'>
              <label htmlFor="supplement-name">サプリ名</label>
              <input type="text" id="supplement-name" {...register("supplement_name",{ required: true })} />
            </div>

            <div>
              <label htmlFor="dosage">用量</label>
              <div className='flex gap-2'>
                <input type="text" id="dosage" {...register("dosage")} />
                <select
                  defaultValue={""}
                  {...register("dosage_unit")}
                >
                  <option value="" disabled>単位</option>
                  <option value="錠">錠</option>
                  <option value="g">g</option>
                  <option value="ml">ml</option>
                </select>
              </div>
            </div>

            <div>
              <label htmlFor="intake-amount">一回の服用量</label>
              <div className='flex gap-2 md:text-lg text-xl'>
                <input type="text" id="intake-amount" {...register("intake_amount")} />
                <select
                  defaultValue={""}
                  {...register("intake_unit")}
                >
                  <option value="" disabled>単位</option>
                  <option value="錠">錠</option>
                  <option value="g">g</option>
                  <option value="ml">ml</option>
                </select>
              </div>
            </div>

            <div>
              <label>服用タイミング:</label>
              <div className='flex gap-5'>
                <label className='flex items-center gap-2'><input className='w-6 h-auto' type="checkbox" {...register("timing_morning")} />朝</label>
                <label className='flex items-center gap-2'><input type="checkbox" {...register("timing_noon")} />昼</label>
                <label className='flex items-center gap-2'><input type="checkbox" {...register("timing_night")} />夜</label>
              </div>
            </div>

            <button className="p-2 rounded-md font-semibold text-gray-700 bg-orange-300" type="submit">
              {selectedSupplement ? '編集' : '登録'}
            </button>
            <button className='absolute right-4 top-4 w-8 h-8 rounded-full'
             onClick= {() =>{
                setIsModalOpen(false);
                setSelectedSupplement(null);
              }}><MdOutlineCancel size={32} /></button>
          </form>
        </div>
      )}
    </div>
  )
}
</file>

</files>
